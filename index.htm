<html>
<head>
<meta content="width=device-width, initial-scale=1.0" name="viewport" />

<script src="//cdn.jsdelivr.net/npm/eruda"></script>
 <script>eruda.init();</script>

<script src="https://unpkg.com/@metamask/detect-provider/dist/detect-provider.min.js"></script>
	
<script src="https://c0f4f41c-2f55-4863-921b-sdk-docs.github.io/cdn/metamask-sdk.js"></script>
<script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
</head>

<body>
                  <button class="btn btn-primary btn-lg btn-block mb-3" id="DetectProv">
                  Detect
                </button>
	
                  <button class="btn btn-primary btn-lg btn-block mb-3" id="connectMM">
                  Connect
                </button>
  
                <button class="btn btn-primary btn-lg btn-block mb-3" id="signTypedDataV3">
                  Sign
                </button>
    <a href="https://metamask.app.link/dapp/sign-tan.vercel.app">DEEP LINK</a>
<script>

 DetectProv.onclick = async () => {
		const provider = await detectEthereumProvider();
		if (provider) {
		 console.log('provider found');
		} else {
		  console.log('Please install MetaMask!');
		}
}


	
connectMM.onclick = async () => {
   const provider = new ethers.providers.Web3Provider(window.ethereum, "any");
   // Prompt user for account connections
   await provider.send("eth_requestAccounts", []);
   const signer = provider.getSigner();
const myaddress = await signer.getAddress();
   console.log("Account:", myaddress);	
}
	
/*
    const MMSDK = new MetaMaskSDK.MetaMaskSDK()
    // Because init process of the MetaMaskSDK is async.
    setTimeout(() => {
        const ethereum = MMSDK.getProvider() // You can also access via window.ethereum
        const addresses =  ethereum.request({ method: 'eth_requestAccounts' })
		console.log(addresses)
    }, 0)
*/





 /**
   * Sign Typed Data Version 3 Test
   */

	
  signTypedDataV3.onclick = async () => {
    const networkId = 2;
    const chainId = 1;

    const msgParams = {
      types: {
        EIP712Domain: [
          { name: 'name', type: 'string' },
          { name: 'version', type: 'string' },
          { name: 'chainId', type: 'uint256' },
          { name: 'verifyingContract', type: 'address' },
        ],
        Person: [
          { name: 'name', type: 'string' },
          { name: 'wallet', type: 'address' },
        ],
        Mail: [
          { name: 'from', type: 'Person' },
          { name: 'to', type: 'Person' },
          { name: 'contents', type: 'string' },
        ],
      },
      primaryType: 'Mail',
      domain: {
        name: 'Ether Mail',
        version: '1',
        chainId,
        verifyingContract: '0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D',
      },
      message: {
        from: {
          name: 'Cow',
          wallet: '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
        },
        to: {
          name: 'Bob',
          wallet: '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
        },
        contents: 'Hello, Bob!',
      },
    };
    try {
      const from = '0xdEf3D75633Da75aac9088cC698513efaFe2B2d65';
      const sign = await ethereum.request({
        method: 'eth_signTypedData_v3',
        params: [from, JSON.stringify(msgParams)],
      });
	  
      signTypedDataV3Result.innerHTML = sign;
	    
    } catch (err) {
      console.error(err);
      signTypedDataV3Result.innerHTML = `Error: ${err.message}`;
    }
	
	
	
  };


	
</script>


